# Top level entry required to mark this as a global AnalyzerConfig file
root = true

[*.cs]
######## Indentation and spacing ########
indent_size = 4
indent_style = space
tab_width = 4
######## Style ##########################
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/
csharp_style_expression_bodied_methods = true:silent
csharp_style_expression_bodied_properties = when_on_single_line:error
csharp_style_expression_bodied_indexers = when_on_single_line:error
csharp_style_expression_bodied_accessors = when_on_single_line:error

dotnet_style_qualification_for_field = false:error
dotnet_style_qualification_for_property = false:error
dotnet_style_qualification_for_method = false:error
dotnet_style_qualification_for_event = false:error
dotnet_style_require_accessibility_modifiers = for_non_interface_members:error
dotnet_style_readonly_field = true:error
csharp_prefer_static_local_function = false:error # We don't want static methods.

###### Usings styling
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = false
csharp_qualified_using_at_nested_scope = true:error

###### Bracket styling
csharp_new_line_before_open_brace = methods
# accessors, anonymous_methods, anonymous_types, control_blocks, events, indexers, lambdas, local_functions, methods, object_collection_array_initializers, properties, types - Require braces to be on a new line for the specified code element ("Allman" style).
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true

###### Make private fields underscored.
dotnet_naming_symbols.private_fields.applicable_kinds                   = field
dotnet_naming_symbols.private_fields.applicable_accessibilities         = private
dotnet_naming_style.private_fields_style.capitalization                 = camel_case
dotnet_naming_style.private_fields_style.required_prefix                = _
dotnet_naming_rule.private_fields_rule.style                            = private_fields_style
dotnet_naming_rule.private_fields_rule.symbols                          = private_fields
dotnet_naming_rule.private_fields_rule.severity                         = error

###### Make static fields underscore + camel case.
dotnet_naming_symbols.private_static_fields.applicable_kinds            = field
dotnet_naming_symbols.private_static_fields.applicable_accessibilities  = private
dotnet_naming_symbols.private_static_fields.required_modifiers          = static
dotnet_naming_style.private_static_fields_style.capitalization          = camel_case
dotnet_naming_style.private_static_fields_style.required_prefix         = _
dotnet_naming_rule.private_static_fields_rule.style                     = private_static_fields_style
dotnet_naming_rule.private_static_fields_rule.symbols                   = private_static_fields
dotnet_naming_rule.private_static_fields_rule.severity                  = error

###### Make public static fields pascal case.
dotnet_naming_symbols.public_static_fields.applicable_kinds             = field
dotnet_naming_symbols.public_static_fields.applicable_accessibilities   = public
dotnet_naming_symbols.public_static_fields.required_modifiers           = static
dotnet_naming_style.public_static_fields_style.capitalization           = pascal_case
dotnet_naming_rule.public_static_fields_rule.style                      = public_static_fields_style
dotnet_naming_rule.public_static_fields_rule.symbols                    = public_static_fields
dotnet_naming_rule.public_static_fields_rule.severity                   = error

###### Make public elements capitalized.
# # Defining the 'public_symbols' symbol group
# dotnet_naming_symbols.public_symbols.applicable_kinds           = property,method,field,event,delegate
# dotnet_naming_symbols.public_symbols.applicable_accessibilities = public
# dotnet_naming_symbols.public_symbols.required_modifiers         = readonly
# # Defining the `first_word_upper_case_style` naming style
# dotnet_naming_style.first_word_upper_case_style.capitalization = first_word_upper
# # Defining the `public_members_must_be_capitalized` naming rule, by setting the symbol group to the 'public symbols' symbol group,
# dotnet_naming_rule.public_members_must_be_capitalized.symbols   = public_symbols
# # setting the naming style to the `first_word_upper_case_style` naming style,
# dotnet_naming_rule.public_members_must_be_capitalized.style    = first_word_upper_case_style
# # and setting the severity.
# dotnet_naming_rule.public_members_must_be_capitalized.severity = suggestion
dotnet_diagnostic.IDE1006.severity = error

######## Quality ########################
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/

#########################################
# More details: https://github.com/dotnet/roslyn/issues/35690
# error, warn, info, hidden, suppress.
#dotnet_diagnostic.*.severity = error
dotnet_diagnostic.MA0004.severity = error   # [Meziantou] Use ConfigureAwait(false) as the current SynchronizationContext is not needed
dotnet_diagnostic.S1135.severity = warning  # Complete the task associated to this 'TODO' comment. 
dotnet_diagnostic.MA0049.severity = error   # [Meziantou] Type name should not match namespace
#dotnet_code_quality.ca1822.api_surface = private, internal

dotnet_diagnostic.CA1724.severity = warning # Type name should not match namespace
dotnet_diagnostic.CA1806.severity = error   # Parse calls TryParseTimeSpan but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.
dotnet_diagnostic.CA1816.severity = error   # Dispose methods should call SuppressFinalize
dotnet_diagnostic.CA1822.severity = silent  # Mark members as static, however as we aim to use as few static keywords as possible this is a false alarm. 
dotnet_diagnostic.CA1825.severity = error   # Avoid zero-length array allocations
dotnet_diagnostic.CA1834.severity = error   # Use 'StringBuilder.Append(char)' instead of 'StringBuilder.Append(string)' when the input is a constant unit string
dotnet_diagnostic.CA1835.severity = error   # Change the 'ReadAsync' method call to use the 'Stream.ReadAsync(Memory<byte>, CancellationToken)' overload
dotnet_diagnostic.CA2000.severity = warning # Dispose objects before losing scope
dotnet_diagnostic.CA2007.severity = error   # Do not directly await a Task (Use ConfigureAwait).
dotnet_diagnostic.CA2101.severity = error   # Specify marshaling for P/Invoke string arguments
dotnet_diagnostic.CA2208.severity = error   # Instantiate argument exceptions correctly
dotnet_diagnostic.CA2249.severity = error   # Consider using 'string.Contains' instead of 'string.IndexOf'


######## .NET Coding Conventions ########

# CA2000: Dispose objects before losing scope

#dotnet_code_quality.CA2000.severity = error
#dotnet_code_quality.CA2007.severity = error

csharp_style_var_for_built_in_types=true


# Disable regions
# maybe Stylecop rules?
# Correct member names
# correct curly brackets
# only one class per file.
# - SA1402 StyleCop.Analyzers

