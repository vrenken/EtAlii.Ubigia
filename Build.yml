# Default Ubigia build and test pipeline. 
variables:
  buildDisplayName: 'EtAlii.Ubigia'
  sonarQubeProject: 'EtAlii.Ubigia'
  timeoutInMinutes: 240
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Debug'

trigger:
  - master

name: ${{ variables.buildDisplayName }}

jobs:
  - job: 'buildAndTest'
    displayName: 'Build and Test'
    timeoutInMinutes: ${{ variables.timeoutInMinutes }}
    pool:
      name: 'Avalon agent pool'
      demands:
        #- SpecialSoftware # Check if SpecialSoftware capability exists
        # Check if Agent.OS == Windows_NT
        - Agent.OS -equals Windows_NT 
      #vmImage: 'ubuntu-latest'    # For Docker.
      #vmImage: 'windows-latest'   # For Windows.
    steps:
    
# BUILD
      - task: UseDotNet@2
        displayName: 'Use: dotnet SDK 3.1.401'
        inputs:
          packageType: 'sdk'
          version: '3.1.401'

      - task: Cache@2
        inputs:
          key: 'nuget | "$(Agent.OS)" | **/*.csproj'
          restoreKeys: |
            nuget | "$(Agent.OS)"
          path: $(Pipeline.Workspace)/.nuget/packages
        displayName: Cache NuGet packages

      - task: Cache@2
        inputs:
          key: 'nuget | "$(Agent.OS)" | **/*.csproj'
          restoreKeys: |
            nuget | "$(Agent.OS)"
            nuget
          path: $(Pipeline.Workspace)/.nuget/packages
        displayName: Cache NuGet packages

      - task: DotNetCoreCLI@2
        displayName: 'Run: dotnet restore'
        condition: ne(variables.CACHE_RESTORED, 'true')
        inputs:
          command: 'restore'
          projects: |
            **/*.csproj
            !**/ProjectToExclude.csproj
          feedsToUse: config
          nugetConfigPath: NuGet.config

      - task: SonarQubePrepare@4
        displayName: 'SonarQube: prepare'
        inputs:
          SonarQube: 'Avalon SonarQube'
          scannerMode: 'MSBuild'
          projectKey: ${{ variables.sonarQubeProject }}
          extraProperties: |
            # sonar.cs.vscoveragexml.reportsPaths=$(Build.SourcesDirectory)/**/*.coveragexml
            sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/coverage.opencover.xml
            sonar.coverage.exclusions=”**/*.Tests.cs”

      - task: DotNetCoreCLI@2
        displayName: 'Run: dotnet build'
        inputs:
          command: 'build'
          projects: |
            **/*.sln
            !**/StorageBrowser.csproj

# TEST
      - task: DotNetCoreCLI@2
        displayName: 'Run: dotnet test'
        inputs:
          command: test
          projects: '**/*.Tests.csproj'
          arguments: '/p:CollectCoverage=true /p:SolutionDir=$(Build.SourcesDirectory) /p:CoverletOutputFormat=opencover'
        continueOnError: true


      - task: SonarQubeAnalyze@4
        displayName: 'SonarQube: analyse'


      - task: SonarQubePublish@4
        displayName: 'SonarQube: publish'
        inputs:
          pollingTimeoutSec: '300'

# PUBLISH
#      - task: NuGetAuthenticate@0
#        displayName: 'Run: nuget authenticate'
#
#      - script: dotnet nuget push --api-key AzureArtifacts --skip-duplicate --source ${{ variables.packageFeedUrl }} **/*.nupkg
#        displayName: 'Run: dotnet nuget push'

