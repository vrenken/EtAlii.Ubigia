<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDte" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".ps1" #>
<#

  var visualStudio = (this.Host as IServiceProvider).GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
  var project = visualStudio.Solution.FindProjectItem(this.Host.TemplateFile)
                                     .ContainingProject as EnvDTE.Project;

#>
Import-Module C:\TFS\EtAlii\EtAlii.Ubigia\Main\Sources\Client\Windows\Console\EtAlii.Ubigia.PowerShell.Test\bin\Debug\EtAlii.Ubigia.PowerShell.dll

Select-Storage http://localhost:64000 test 123

Add-Account peter 123

Get-Accounts

$entry = Add-Entry c:\test.jpg
$entry = Add-Entry c:\test-altered.jpg $entry

$entry = Get-Entry -Last
$entry = Get-Entry -First

$entries = Get-Entries -Root FileSystem
$entries = Get-Entries -Related $entry 5
$entries = Get-Entries -History $entry 5

$entries = Get-Entries -Related $entry
$entries = Get-Entries -History $entry


Register-RootEntry -Name $entry
Unregister-RootEntry -Name $entry 


$entry = Add-Entry -Root FileSystem -File c:\test.jpg
$entry = Add-Entry -Previous $previous -File c:\test.jpg
$entry = Add-Entry -Parent $parent -File c:\test.jpg
$entry = Add-Entry -Update $old -File c:\test.jpg

$entry = Add-Entry -Root FileSystem -Text "Test"
$entry = Add-Entry -Previous $previous -Text "Test"
$entry = Add-Entry -Parent $parent -Text "Test"
$entry = Add-Entry -Update $old -Text "Test"


$entry = Update-Entry $entry -Child $child
$entry = Update-Entry $entry -Next $next
$entry = Update-Entry $entry -Update $next

$entry = Update-Entry $entry -Text "Test"
$entry = Update-Entry $entry -File "c:\test.jpg"



$entry = Update-Entry c:\test.jpg

<#+
	public string GetProjectOutputBuildFolder(EnvDTE.Project proj )
	{
		var result = "No result";
		EnvDTE.Configuration activeConfiguration;
		EnvDTE.ConfigurationManager configManager;
		String outputPath;
		String absoluteOutputPath;
		String projectFolder;

		// Get the configuration manager of the project
		configManager = proj.ConfigurationManager;

		if(configManager == null)
		{
			result = "The project " + proj.Name + " doesn't have a configuration manager";
		}
		else
		{
			// Get the active project configuration
			activeConfiguration = configManager.ActiveConfiguration;

			// Get the output folder
			outputPath = activeConfiguration.Properties.Item("OutputPath").Value.ToString();

			// The output folder can have these patterns:
			// 1) "\\server\folder"
			// 2) "drive:\folder"
			// 3) "..\..\folder"
			// 4) "folder"

			string path = String.Format("{0}{1}",(char)System.IO.Path.DirectorySeparatorChar, (char)System.IO.Path.DirectorySeparatorChar);
			if(outputPath.StartsWith(path))
			{
				// This is the case 1: "\\server\folder"
				absoluteOutputPath = outputPath;
			}
			else if(outputPath.Length >= 2 && outputPath[1] == System.IO.Path.VolumeSeparatorChar)
			{
				// This is the case 2: "drive:\folder"
				absoluteOutputPath = outputPath;
			}         
			else if(outputPath.IndexOf(@"..\") != -1)
			{
				// This is the case 3: "..\..\folder"
				projectFolder = System.IO.Path.GetDirectoryName(proj.FullName);

				while(outputPath.StartsWith(@"..\"))
				{
					outputPath = outputPath.Substring(3);
					projectFolder = System.IO.Path.GetDirectoryName(projectFolder);
				}

				absoluteOutputPath = System.IO.Path.Combine(projectFolder, outputPath);
			}
			else
			{
				// This is the case 4: "folder"
				projectFolder = System.IO.Path.GetDirectoryName(proj.FullName);
				absoluteOutputPath = System.IO.Path.Combine(projectFolder, outputPath);
			}
			result = absoluteOutputPath;
		}
		return result;
	}
#>
