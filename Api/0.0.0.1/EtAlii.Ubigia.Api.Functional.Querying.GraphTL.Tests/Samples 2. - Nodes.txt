-- ==================================================================================================================
-- 01. Traverse to a single node and returns it as a named item. 
-- Throws an error if multiple nodes are found. 
Person @node(Person:Doe/John)
{
    FirstName,
    LastName,
    NickName
}

-- ==================================================================================================================
-- 02. Traverse to multiple nodes and returns them as an array. 
-- Does not throw an error when no node or only one node is found.
Person @nodes(Person:Doe/)
{
    FirstName,
    LastName,
    NickName
}

-- ==================================================================================================================
-- 03. Returns both an item and an array in one single response.
Data
{
    Person @node(Person:Doe/John)
    {
        FirstName @value(),
        LastName @value(\#FamilyName),
        NickName,
        Friends @nodes(/Friends/)  
    },
    Location @nodes(location:DE/Berlin//)
    {
        FirstName @value(),
        LastName @value(\#FamilyName),
        NickName,
        Friends @nodes(/Friends/)  
    }
}

-- ==================================================================================================================
-- 04.a Returns two different arrays in one single response.
Data
{
    Person @nodes(Person:Doe/*)
    {
        FirstName @value(),
        LastName @value(\#FamilyName),
        NickName,
        Friends @nodes(/Friends/)  
    },
    Location @nodes(location:DE/Berlin//)
    {
        FirstName @value(),
        LastName @value(\#FamilyName),
        NickName,
        Friends @nodes(/Friends/)  
    }
}

-- ==================================================================================================================
-- 04.b Returns two different arrays in one single response.
Data
{
    Person @nodes(Person:Doe/*)
    {
        FirstName @value(),
        LastName @value(\#FamilyName),
        NickName,
        Friends @nodes(/Friends/)  
    }
    Location @nodes(location:DE/Berlin//)
    {
        FirstName @value(),
        LastName @value(\#FamilyName),
        NickName,
        Friends @nodes(/Friends/)  
    }
}
-- ==================================================================================================================
-- 05. Merge two distinct sets of nodes traversed.
-- Data
-- {
--     Person 
--     @node(person:Doe/John)
--     @nodes(location:DE/Berlin//)
--     @nodes(time:2009//)
--     @union(/Locations/","/Visitors/", "/Events/)
--     {
--         FirstName @value(),
--         LastName @value(\#FamilyName),
--         NickName
--     }
-- } 


-- ==================================================================================================================
-- 06.a Nesting is always possible.
DataOuter
{
    DataInner
    {
        Person @node(Person:Doe/John)
        {
            FirstName @value(),
            LastName @value(\#FamilyName),
            NickName
        }
    }
}

-- ==================================================================================================================
-- 06.b Nesting is always possible.
Data
{
    Person @node(Person:Doe/John)
    {
        Name
        {
            First @value(),
            Last @value(\LastName),
            NickName
        }
    }
}

-- ==================================================================================================================
-- 06.c Nest traversal queries to explore additional context.
Data
{
    Person @node(Person:Doe/John)
    {
        FirstName @value(),
        LastName @value(\#FamilyName),
        NickName,
        Friends @nodes(/Friends/)
        {
            FirstName @value(),
            LastName @value(\#FamilyName),
            NickName
        }  
    }
}
