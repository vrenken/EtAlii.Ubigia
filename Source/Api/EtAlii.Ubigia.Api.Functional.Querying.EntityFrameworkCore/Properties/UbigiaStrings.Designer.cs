// <auto-generated />

using System;
using System.Reflection;
using System.Resources;
using System.Threading;
using JetBrains.Annotations;
using Microsoft.EntityFrameworkCore.Diagnostics;
using Microsoft.Extensions.Logging;

namespace EtAlii.Ubigia.Api.Functional.Querying.EntityFrameworkCore.Internal
{
    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static class UbigiaStrings
    {
        private static readonly ResourceManager _resourceManager = new ResourceManager("EtAlii.Ubigia.Api.Functional.Querying.EntityFrameworkCore.Properties.UbigiaStrings", typeof(UbigiaStrings).Assembly);

        /// <summary>
        ///     Cannot apply 'DefaultIfEmpty' after a client-evaluated projection. Consider applying 'DefaultIfEmpty' before last 'Select' or use 'AsEnumerable' before 'DefaultIfEmpty' to apply it on client-side.
        /// </summary>
        public static string DefaultIfEmptyAppliedAfterProjection
            => GetString("DefaultIfEmptyAppliedAfterProjection");

        /// <summary>
        ///     The specified entity type '{derivedType}' is not derived from '{entityType}'.
        /// </summary>
        public static string InvalidDerivedTypeInEntityProjection([CanBeNull] object derivedType, [CanBeNull] object entityType)
            => string.Format(
                GetString("InvalidDerivedTypeInEntityProjection", nameof(derivedType), nameof(entityType)),
                derivedType, entityType);

        /// <summary>
        ///     There is no query string because the Ubigia provider does not use a string-based query language.
        /// </summary>
        public static string NoQueryStrings
            => GetString("NoQueryStrings");

        /// <summary>
        ///     Unable to bind '{memberType}' '{member}' to entity projection of '{entityType}'.
        /// </summary>
        public static string UnableToBindMemberToEntityProjection([CanBeNull] object memberType, [CanBeNull] object member, [CanBeNull] object entityType)
            => string.Format(
                GetString("UnableToBindMemberToEntityProjection", nameof(memberType), nameof(member), nameof(entityType)),
                memberType, member, entityType);

        /// <summary>
        ///     Attempted to update or delete an entity that does not exist in the store.
        /// </summary>
        public static string UpdateConcurrencyException
            => GetString("UpdateConcurrencyException");

        /// <summary>
        ///     Conflicts were detected for instance of entity type '{entityType}' on the concurrency token properties {properties}. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the conflicting values.
        /// </summary>
        public static string UpdateConcurrencyTokenException([CanBeNull] object entityType, [CanBeNull] object properties)
            => string.Format(
                GetString("UpdateConcurrencyTokenException", nameof(entityType), nameof(properties)),
                entityType, properties);

        /// <summary>
        ///     Conflicts were detected for instance of entity type '{entityType}' with the key value '{keyValue}' on the concurrency token property values {conflictingValues}, with corresponding database values {databaseValues}.
        /// </summary>
        public static string UpdateConcurrencyTokenExceptionSensitive([CanBeNull] object entityType, [CanBeNull] object keyValue, [CanBeNull] object conflictingValues, [CanBeNull] object databaseValues)
            => string.Format(
                GetString("UpdateConcurrencyTokenExceptionSensitive", nameof(entityType), nameof(keyValue), nameof(conflictingValues), nameof(databaseValues)),
                entityType, keyValue, conflictingValues, databaseValues);

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);
            for (var i = 0; i < formatterNames.Length; i++)
            {
                value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
            }

            return value;
        }
    }
}

namespace EtAlii.Ubigia.Api.Functional.Querying.EntityFrameworkCore.Internal
{
    using EtAlii.Ubigia.Api.Functional.Querying.EntityFrameworkCore.Diagnostics;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static class UbigiaResources
    {
        private static readonly ResourceManager _resourceManager = new ResourceManager("EtAlii.Ubigia.Api.Functional.Querying.EntityFrameworkCore.Properties.UbigiaStrings", typeof(UbigiaResources).GetTypeInfo().Assembly);

        /// <summary>
        ///     Saved {count} entities to Ubigia store.
        /// </summary>
        public static EventDefinition<int> LogSavedChanges([NotNull] IDiagnosticsLogger logger)
        {
            var definition = ((Diagnostics.Internal.UbigiaLoggingDefinitions)logger.Definitions).LogSavedChanges;
            if (definition == null)
            {
                definition = LazyInitializer.EnsureInitialized<EventDefinitionBase>(
                    ref ((Diagnostics.Internal.UbigiaLoggingDefinitions)logger.Definitions).LogSavedChanges,
                    () => new EventDefinition<int>(
                        logger.Options,
                        UbigiaEventId.ChangesSaved,
                        LogLevel.Information,
                        "UbigiaEventId.ChangesSaved",
                        level => LoggerMessage.Define<int>(
                            level,
                            UbigiaEventId.ChangesSaved,
                            _resourceManager.GetString("LogSavedChanges"))));
            }

            return (EventDefinition<int>)definition;
        }

        /// <summary>
        ///     Transactions are not supported by the Ubigia store. See http://go.microsoft.com/fwlink/?LinkId=800142
        /// </summary>
        public static EventDefinition LogTransactionsNotSupported([NotNull] IDiagnosticsLogger logger)
        {
            var definition = ((Diagnostics.Internal.UbigiaLoggingDefinitions)logger.Definitions).LogTransactionsNotSupported;
            if (definition == null)
            {
                definition = LazyInitializer.EnsureInitialized<EventDefinitionBase>(
                    ref ((Diagnostics.Internal.UbigiaLoggingDefinitions)logger.Definitions).LogTransactionsNotSupported,
                    () => new EventDefinition(
                        logger.Options,
                        UbigiaEventId.TransactionIgnoredWarning,
                        LogLevel.Warning,
                        "UbigiaEventId.TransactionIgnoredWarning",
                        level => LoggerMessage.Define(
                            level,
                            UbigiaEventId.TransactionIgnoredWarning,
                            _resourceManager.GetString("LogTransactionsNotSupported"))));
            }

            return (EventDefinition)definition;
        }
    }
}
